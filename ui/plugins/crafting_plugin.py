"""
Plugin systemu craftingu dla Smart Interface.
Integruje tworzenie przedmiot√≥w, receptury i ≈Ça≈Ñcuchy produkcji.
"""

from typing import List, Dict, Any, Callable, Optional
from ui.smart_interface import PluginInterface, ContextualAction, ActionType


class CraftingPlugin(PluginInterface):
    """Plugin rozszerzajƒÖcy interfejs o funkcje craftingu."""
    
    def __init__(self):
        self.known_recipes = set()  # Znane receptury
        self.crafting_queue = []  # Kolejka produkcji
        self.material_tracker = {}  # ≈öledzenie materia≈Ç√≥w
        self.quality_modifiers = {}  # Modyfikatory jako≈õci
        self.crafting_stats = {
            "items_crafted": 0,
            "perfect_quality": 0,
            "failed_attempts": 0
        }
        
    def register_actions(self) -> List[ContextualAction]:
        """Rejestruje akcje craftingu."""
        actions = []
        
        # Otw√≥rz crafting
        actions.append(ContextualAction(
            id="open_crafting",
            name="Otw√≥rz warsztat",
            description="Otw√≥rz menu craftingu",
            type=ActionType.CRAFT,
            command="crafting",
            icon="üî®",
            hotkey="c",
            condition=lambda ctx: self._has_crafting_station(ctx),
            priority=95,
            category="crafting"
        ))
        
        # Stw√≥rz przedmiot
        actions.append(ContextualAction(
            id="craft_item",
            name="Stw√≥rz przedmiot",
            description="Wytw√≥rz przedmiot z materia≈Ç√≥w",
            type=ActionType.CRAFT,
            command="stw√≥rz",
            icon="‚öíÔ∏è",
            condition=lambda ctx: self._can_craft_anything(ctx),
            priority=90,
            category="crafting"
        ))
        
        # Sprawd≈∫ receptury
        actions.append(ContextualAction(
            id="check_recipes",
            name="Sprawd≈∫ receptury",
            description="Zobacz dostƒôpne receptury",
            type=ActionType.CRAFT,
            command="receptury",
            icon="üìã",
            condition=lambda ctx: len(self.known_recipes) > 0,
            priority=85,
            category="crafting"
        ))
        
        # Sprawd≈∫ materia≈Çy
        actions.append(ContextualAction(
            id="check_materials",
            name="Sprawd≈∫ materia≈Çy",
            description="Zobacz dostƒôpne materia≈Çy",
            type=ActionType.CRAFT,
            command="materia≈Çy",
            icon="üì¶",
            condition=lambda ctx: self._has_materials(ctx),
            priority=80,
            category="crafting"
        ))
        
        # Ulepsz przedmiot
        actions.append(ContextualAction(
            id="upgrade_item",
            name="Ulepsz przedmiot",
            description="Popraw jako≈õƒá przedmiotu",
            type=ActionType.CRAFT,
            command="ulepsz",
            icon="‚ú®",
            condition=lambda ctx: self._has_upgradeable_item(ctx),
            priority=75,
            category="crafting"
        ))
        
        # Napraw przedmiot
        actions.append(ContextualAction(
            id="repair_item",
            name="Napraw przedmiot",
            description="Napraw uszkodzony przedmiot",
            type=ActionType.CRAFT,
            command="napraw",
            icon="üîß",
            condition=lambda ctx: self._has_damaged_item(ctx),
            priority=78,
            category="crafting"
        ))
        
        # Rozmontuj przedmiot
        actions.append(ContextualAction(
            id="disassemble",
            name="Rozmontuj przedmiot",
            description="Odzyskaj materia≈Çy z przedmiotu",
            type=ActionType.CRAFT,
            command="rozmontuj",
            icon="üî©",
            condition=lambda ctx: self._has_disassembleable_item(ctx),
            priority=70,
            category="crafting"
        ))
        
        # Naucz siƒô receptury
        actions.append(ContextualAction(
            id="learn_recipe",
            name="Naucz siƒô receptury",
            description="Odkryj nowƒÖ recepturƒô",
            type=ActionType.CRAFT,
            command="naucz_receptury",
            icon="üìñ",
            condition=lambda ctx: self._has_recipe_to_learn(ctx),
            priority=65,
            category="crafting"
        ))
        
        # Masowa produkcja
        actions.append(ContextualAction(
            id="mass_craft",
            name="Masowa produkcja",
            description="Stw√≥rz wiele przedmiot√≥w naraz",
            type=ActionType.CRAFT,
            command="masowa_produkcja",
            icon="üè≠",
            condition=lambda ctx: self._can_mass_produce(ctx),
            priority=72,
            category="crafting"
        ))
        
        # Eksperymentuj
        actions.append(ContextualAction(
            id="experiment",
            name="Eksperymentuj",
            description="Pr√≥buj stworzyƒá co≈õ nowego",
            type=ActionType.CRAFT,
            command="eksperymentuj",
            icon="üß™",
            condition=lambda ctx: self._has_experimental_materials(ctx),
            priority=60,
            category="crafting"
        ))
        
        # Sprawd≈∫ jako≈õƒá
        actions.append(ContextualAction(
            id="check_quality",
            name="Sprawd≈∫ jako≈õƒá materia≈Ç√≥w",
            description="Oce≈Ñ jako≈õƒá dostƒôpnych materia≈Ç√≥w",
            type=ActionType.CRAFT,
            command="jako≈õƒá_materia≈Ç√≥w",
            icon="üíé",
            condition=lambda ctx: self._has_materials(ctx),
            priority=68,
            category="crafting"
        ))
        
        # Statystyki craftingu
        actions.append(ContextualAction(
            id="crafting_stats",
            name="Statystyki rzemios≈Ça",
            description="Zobacz swoje osiƒÖgniƒôcia w craftingu",
            type=ActionType.CRAFT,
            command="statystyki_craftingu",
            icon="üìä",
            condition=lambda ctx: self.crafting_stats["items_crafted"] > 0,
            priority=55,
            category="crafting"
        ))
        
        return actions
    
    def register_status_widgets(self) -> List[Callable]:
        """Dodaje widgety craftingu do status bara."""
        widgets = []
        
        def crafting_queue_widget(game_state):
            """Widget pokazujƒÖcy kolejkƒô produkcji."""
            if self.crafting_queue:
                item = self.crafting_queue[0]
                remaining = len(self.crafting_queue)
                if remaining > 1:
                    return f"‚öíÔ∏è {item} (+{remaining-1})"
                return f"‚öíÔ∏è Tworzenie: {item}"
            return ""
        
        def materials_widget(game_state):
            """Widget pokazujƒÖcy kluczowe materia≈Çy."""
            if self.material_tracker:
                # Poka≈º 3 najwa≈ºniejsze materia≈Çy
                key_materials = ["≈ºelazo", "drewno", "sk√≥ra"]
                counts = []
                for material in key_materials:
                    if material in self.material_tracker:
                        count = self.material_tracker[material]
                        if count > 0:
                            counts.append(f"{material[:3]}:{count}")
                if counts:
                    return f"üì¶ {' '.join(counts[:3])}"
            return ""
        
        def crafting_skill_widget(game_state):
            """Widget poziomu craftingu."""
            if hasattr(game_state, 'player'):
                player = game_state.player
                if hasattr(player, 'skills'):
                    # Zak≈Çadamy ≈ºe jest skill kowalstwa
                    from player.skills import SkillName
                    smithing = player.skills.get_skill(SkillName.KOWALSTWO)
                    if smithing and smithing.level > 0:
                        return f"üî® Kowalstwo: {smithing.level}"
            return ""
        
        def recipe_count_widget(game_state):
            """Widget liczby znanych receptur."""
            if self.known_recipes:
                return f"üìã Receptury: {len(self.known_recipes)}"
            return ""
        
        widgets.append(crafting_queue_widget)
        widgets.append(materials_widget)
        widgets.append(crafting_skill_widget)
        widgets.append(recipe_count_widget)
        
        return widgets
    
    def register_parsers(self) -> Dict[str, Callable]:
        """Dodaje parsery dla komend craftingu."""
        parsers = {}
        
        def parse_crafting_command(text: str, context: Dict) -> Optional[str]:
            """Parser dla komend craftingu."""
            text = text.lower()
            
            # "zr√≥b miecz" -> "stw√≥rz miecz"
            if text.startswith("zr√≥b "):
                item = text[5:]
                return f"stw√≥rz {item}"
            
            # "wykuj zbrojƒô" -> "stw√≥rz zbroja"
            if text.startswith("wykuj "):
                item = text[6:]
                return f"stw√≥rz {item}"
            
            # "napraw miecz" -> "napraw miecz"
            if text.startswith("napraw "):
                return text
            
            # "ulepsz bro≈Ñ" -> "ulepsz bro≈Ñ"
            if text.startswith("ulepsz "):
                return text
            
            # "rozbierz na czƒô≈õci" -> "rozmontuj"
            if "rozbierz" in text or "na czƒô≈õci" in text:
                return "rozmontuj"
            
            # "co mogƒô zrobiƒá?" -> "receptury"
            if "co mogƒô zrobiƒá" in text or "co mogƒô stworzyƒá" in text:
                return "receptury"
            
            # "jakie mam materia≈Çy?" -> "materia≈Çy"
            if "jakie mam materia≈Çy" in text or "co mam w zapasach" in text:
                return "materia≈Çy"
            
            # "stw√≥rz 10 strza≈Ç" -> "masowa_produkcja strza≈Ça 10"
            import re
            mass_match = re.match(r"stw√≥rz (\d+) (.+)", text)
            if mass_match:
                count = mass_match.group(1)
                item = mass_match.group(2)
                return f"masowa_produkcja {item} {count}"
            
            return None
        
        def parse_recipe_query(text: str, context: Dict) -> Optional[str]:
            """Parser dla zapyta≈Ñ o receptury."""
            text = text.lower()
            
            # "jak zrobiƒá miecz?" -> "receptura miecz"
            if text.startswith("jak zrobiƒá ") or text.startswith("jak stworzyƒá "):
                item = text.split(" ", 2)[2].rstrip("?")
                return f"receptura {item}"
            
            # "czego potrzebujƒô do zbroi?" -> "materia≈Çy_do zbroja"
            if "czego potrzebujƒô" in text or "co potrzebne" in text:
                words = text.split()
                if "do" in words:
                    idx = words.index("do")
                    if idx < len(words) - 1:
                        item = " ".join(words[idx+1:]).rstrip("?")
                        return f"materia≈Çy_do {item}"
            
            # "czy mogƒô zrobiƒá tarczƒô?" -> "czy_mogƒô_stworzyƒá tarcza"
            if text.startswith("czy mogƒô zrobiƒá ") or text.startswith("czy mogƒô stworzyƒá "):
                item = text.split(" ", 3)[3].rstrip("?")
                return f"czy_mogƒô_stworzyƒá {item}"
            
            return None
        
        parsers["crafting"] = parse_crafting_command
        parsers["recipe"] = parse_recipe_query
        
        return parsers
    
    def on_action_executed(self, action: str, result: Any):
        """Reaguje na wykonane akcje."""
        # ≈öled≈∫ crafting
        if "stworzy≈Ç" in str(result) or "wytworzy≈Ç" in str(result):
            self.crafting_stats["items_crafted"] += 1
            
            # Sprawd≈∫ jako≈õƒá
            if "doskona≈Çej jako≈õci" in str(result) or "mistrzowski" in str(result):
                self.crafting_stats["perfect_quality"] += 1
        
        # ≈öled≈∫ niepowodzenia
        if "nie uda≈Ço" in str(result) or "zniszczy≈Ç" in str(result):
            self.crafting_stats["failed_attempts"] += 1
        
        # Aktualizuj materia≈Çy
        if "zu≈ºy≈Ç" in str(result) or "wykorzysta≈Ç" in str(result):
            self._update_material_tracker(result)
        
        # Nowe receptury
        if "nauczy≈Ç siƒô" in str(result) and "receptury" in str(result):
            self._add_recipe(result)
    
    def _has_crafting_station(self, context: Dict) -> bool:
        """Sprawdza czy jest warsztat w pobli≈ºu."""
        location = context.get("current_location", "")
        stations = ["ku≈∫nia", "warsztat", "st√≥≈Ç rzemie≈õlniczy", "kowad≈Ço", "piec"]
        return any(station in str(location).lower() for station in stations)
    
    def _can_craft_anything(self, context: Dict) -> bool:
        """Sprawdza czy gracz mo≈ºe cokolwiek stworzyƒá."""
        if not self._has_crafting_station(context):
            return False
        
        # Sprawd≈∫ czy ma materia≈Çy i receptury
        return len(self.known_recipes) > 0 and self._has_materials(context)
    
    def _has_materials(self, context: Dict) -> bool:
        """Sprawdza czy gracz ma jakie≈õ materia≈Çy."""
        if "player" in context and hasattr(context["player"], "inventory"):
            # Sprawd≈∫ czy ma materia≈Çy craftingowe
            crafting_materials = ["≈ºelazo", "drewno", "sk√≥ra", "tkanina", "kamie≈Ñ"]
            for item in context["player"].inventory:
                if any(mat in item.get("name", "").lower() for mat in crafting_materials):
                    return True
        return False
    
    def _has_upgradeable_item(self, context: Dict) -> bool:
        """Sprawdza czy gracz ma przedmiot do ulepszenia."""
        if "player" in context and hasattr(context["player"], "inventory"):
            for item in context["player"].inventory:
                # Sprawd≈∫ czy przedmiot mo≈ºe byƒá ulepszony
                if item.get("quality", 0) < 5:  # Max quality 5
                    return True
        return False
    
    def _has_damaged_item(self, context: Dict) -> bool:
        """Sprawdza czy gracz ma uszkodzony przedmiot."""
        if "player" in context and hasattr(context["player"], "inventory"):
            for item in context["player"].inventory:
                if item.get("durability", 100) < 100:
                    return True
        return False
    
    def _has_disassembleable_item(self, context: Dict) -> bool:
        """Sprawdza czy gracz ma przedmiot do rozmontowania."""
        if "player" in context and hasattr(context["player"], "inventory"):
            # Niekt√≥re przedmioty mo≈ºna rozmontowaƒá
            disassembleable = ["miecz", "zbroja", "tarcza", "he≈Çm", "narzƒôdzie"]
            for item in context["player"].inventory:
                if any(type in item.get("name", "").lower() for type in disassembleable):
                    return True
        return False
    
    def _has_recipe_to_learn(self, context: Dict) -> bool:
        """Sprawdza czy sƒÖ receptury do nauczenia."""
        # Mo≈ºna znale≈∫ƒá receptury w ksiƒÖ≈ºkach lub od NPC√≥w
        if "player" in context and hasattr(context["player"], "inventory"):
            for item in context["player"].inventory:
                if "receptura" in item.get("name", "").lower() or "ksiƒôga" in item.get("name", "").lower():
                    return True
        return False
    
    def _can_mass_produce(self, context: Dict) -> bool:
        """Sprawdza czy mo≈ºna produkowaƒá masowo."""
        # Wymaga du≈ºej ilo≈õci materia≈Ç√≥w i znajomo≈õci receptury
        if not self._has_crafting_station(context):
            return False
        
        # Sprawd≈∫ czy ma du≈ºo materia≈Ç√≥w
        material_count = sum(self.material_tracker.values())
        return material_count >= 10 and len(self.known_recipes) > 0
    
    def _has_experimental_materials(self, context: Dict) -> bool:
        """Sprawdza czy gracz ma materia≈Çy do eksperyment√≥w."""
        if "player" in context and hasattr(context["player"], "inventory"):
            # Rzadkie materia≈Çy do eksperyment√≥w
            rare_materials = ["kryszta≈Ç", "esencja", "proszek", "ko≈õƒá", "klejnot"]
            for item in context["player"].inventory:
                if any(mat in item.get("name", "").lower() for mat in rare_materials):
                    return True
        return False
    
    def _update_material_tracker(self, result: Any):
        """Aktualizuje ≈õledzenie materia≈Ç√≥w."""
        # Parsuj zu≈ºyte materia≈Çy
        result_str = str(result).lower()
        materials = ["≈ºelazo", "drewno", "sk√≥ra", "tkanina", "kamie≈Ñ"]
        
        for material in materials:
            if material in result_str:
                # Zmniejsz ilo≈õƒá
                if material in self.material_tracker:
                    self.material_tracker[material] = max(0, self.material_tracker[material] - 1)
    
    def _add_recipe(self, result: Any):
        """Dodaje nowƒÖ recepturƒô."""
        # TODO: Parsowanie nazwy receptury
        recipe_name = "nowa_receptura"
        self.known_recipes.add(recipe_name)
    
    def get_crafting_hints(self, context: Dict) -> List[str]:
        """Zwraca kontekstowe podpowiedzi craftingowe."""
        hints = []
        
        # Podpowiedzi o materia≈Çach
        if self._has_materials(context):
            hints.append("üî® Masz materia≈Çy - mo≈ºesz co≈õ stworzyƒá!")
        
        # Podpowiedzi o jako≈õci
        if self.crafting_stats["perfect_quality"] > 0:
            success_rate = self.crafting_stats["perfect_quality"] / max(1, self.crafting_stats["items_crafted"])
            if success_rate > 0.5:
                hints.append("‚ú® ≈öwietna jako≈õƒá twoich wyrob√≥w!")
        
        # Podpowiedzi o naprawach
        if self._has_damaged_item(context):
            hints.append("üîß Niekt√≥re przedmioty wymagajƒÖ naprawy")
        
        # Podpowiedzi o eksperymentach
        if self._has_experimental_materials(context):
            hints.append("üß™ Masz rzadkie materia≈Çy - eksperymentuj!")
        
        return hints